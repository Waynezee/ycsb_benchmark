// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: message.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YCSBServerClient is the client API for YCSBServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YCSBServerClient interface {
	// request server to generate workload
	GetCmds(ctx context.Context, in *CmdsReqeust, opts ...grpc.CallOption) (*CmdsReply, error)
	// send ready cmds to server
	ExecuteCmds(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteReply, error)
}

type yCSBServerClient struct {
	cc grpc.ClientConnInterface
}

func NewYCSBServerClient(cc grpc.ClientConnInterface) YCSBServerClient {
	return &yCSBServerClient{cc}
}

func (c *yCSBServerClient) GetCmds(ctx context.Context, in *CmdsReqeust, opts ...grpc.CallOption) (*CmdsReply, error) {
	out := new(CmdsReply)
	err := c.cc.Invoke(ctx, "/common.YCSBServer/GetCmds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yCSBServerClient) ExecuteCmds(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteReply, error) {
	out := new(ExecuteReply)
	err := c.cc.Invoke(ctx, "/common.YCSBServer/ExecuteCmds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YCSBServerServer is the server API for YCSBServer service.
// All implementations must embed UnimplementedYCSBServerServer
// for forward compatibility
type YCSBServerServer interface {
	// request server to generate workload
	GetCmds(context.Context, *CmdsReqeust) (*CmdsReply, error)
	// send ready cmds to server
	ExecuteCmds(context.Context, *ExecuteRequest) (*ExecuteReply, error)
	mustEmbedUnimplementedYCSBServerServer()
}

// UnimplementedYCSBServerServer must be embedded to have forward compatible implementations.
type UnimplementedYCSBServerServer struct {
}

func (UnimplementedYCSBServerServer) GetCmds(context.Context, *CmdsReqeust) (*CmdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCmds not implemented")
}
func (UnimplementedYCSBServerServer) ExecuteCmds(context.Context, *ExecuteRequest) (*ExecuteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCmds not implemented")
}
func (UnimplementedYCSBServerServer) mustEmbedUnimplementedYCSBServerServer() {}

// UnsafeYCSBServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YCSBServerServer will
// result in compilation errors.
type UnsafeYCSBServerServer interface {
	mustEmbedUnimplementedYCSBServerServer()
}

func RegisterYCSBServerServer(s grpc.ServiceRegistrar, srv YCSBServerServer) {
	s.RegisterService(&YCSBServer_ServiceDesc, srv)
}

func _YCSBServer_GetCmds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdsReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YCSBServerServer).GetCmds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.YCSBServer/GetCmds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YCSBServerServer).GetCmds(ctx, req.(*CmdsReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _YCSBServer_ExecuteCmds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YCSBServerServer).ExecuteCmds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.YCSBServer/ExecuteCmds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YCSBServerServer).ExecuteCmds(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// YCSBServer_ServiceDesc is the grpc.ServiceDesc for YCSBServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YCSBServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.YCSBServer",
	HandlerType: (*YCSBServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCmds",
			Handler:    _YCSBServer_GetCmds_Handler,
		},
		{
			MethodName: "ExecuteCmds",
			Handler:    _YCSBServer_ExecuteCmds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
